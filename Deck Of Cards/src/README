Deck of Cards:
I took a bottom up approach to this challenge. I realized that you cannot have a working deck unless you have a  card so i created that first. The card class was easy to build and I made a toString method that allowed me to test later on. In the deck class I used a linked list as the representation for my deck. I picked a linked list because I would be able to access elements in O(n) time and it would make things easier with regards to adding elements to the list. I assumed that there was a possibility that we might add more than 52 cards in a deck and by having a LinkedList it would be easier to do that. Looking back i would have started with an array of length 52 instead because it would had made shuffling much easier and accessing elements would faster. If I assumed that I would only be using 52 cards and I would not be adding more then an array would once again be much better to use because i can hardcode the size of the array and not worry about adding more elements.The way I tried to shuffle in my current implementation just puts all the cards back in the order they were originally put into the linked list. To test I printed the deck before and after I call the methods. I did not have time to make Junit test which is what I usually do. I had problems making a makefile(i kept getting spacing errors), so in order to run the program just run the main class and you can test its functionality by changing the main method.

